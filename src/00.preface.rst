.. _00.preface:

前言
============================


从一开始接触 Contiki 就听说过这样一句话：Contiki 是事件驱动的操作系统。

什么是事件驱动？这个问题一直萦绕在我脑海。我也相信不止我一个初学者有这样的疑惑。

后来慢慢深入，阅读其代码，终于理解了其精髓，然后自信心爆棚，自信自己对其理解程度超过 90%+，所以打算将自己的思路分享出来，为 Contiki 初学者提供一点点帮助。

本文的目标是让 Contiki 菜鸟能尽快掌握要领，让 Contiki 老手尽量有一点点收获，所以这一系列的文章本着 **由浅入深**、深入骨髓的原则。

复杂的软件都需要抽象的思维，Contiki 作为一个操作系统，虽然仅仅是一个 RTOS，但是也可以叫做复杂的软件了，所以不可避免地有很多抽象思维。所以，在学习这部分文章时，请务必注意这一点。相信您在学习完这些文章后，抽象思维会有一定的提升。

.. Hint::
   什么叫抽象思维，个人总结就是如果你要实现一个功能，你能在脑海里构思出需要什么数据结构（函数），这些数据结构大概有啥成员、有啥错综复杂的关系、应该如何使用等等。抽象思维的形成当然不是一蹴而就的，需要有一个积累过程。
   
虽然尽量本着由浅入深的原则来完成这些文章，但是由于它本身错综复杂的关系，所以不可避免地有很多交叉引用的地方。在第一次阅读本系列文章时，你可能会在某些地方想不明白，此时不要焦急，可以不求甚解。待看到后面的相关章节后，再回来看之前的疑问，你可能会豁然开朗。当然，你仍然也有可能还有疑惑，此时你可以先放一放，待阅读完所有章节后，再重头阅读这些文章，相信你会有新的收获。

必须强调的是，不求甚解只是暂时的，学习到最后，必须对每一个犄角旮旯里的知识点（每一行代码）都能理解。如果你到最后是浑浑噩噩的，我会想这会不会是我的错。

如果你学习完这些文章后也自信心爆棚，建议你学习学习 Zephyr 的内核部分。你可以先阅读 Zephyr 中文文档，然后独立阅读其源码，看看能不能分析其中的来龙去脉。如果能，恭喜你，你已经达到了一个新的高度——无论多么复杂的代码，都能轻松上手！

然后，正式开始学习吧，祝你好运！






.. Hint::

   还有一个不得不说的是 *代码阅读工具*，我用过（花了很多心思研究）无数的编辑器/IDE，包括 vim、sublime、notepad++、eclipse、vscode、vs、source insight，最后发现还是 Source Insight 最好用，它非常非常强大，能帮你极其快速地定位、追踪代码。个人挺讨厌单步调试，因为它阻碍了我们分析整个源代码的逻辑流程。所以，尽量丢弃狂霸酷炫吊炸天的单步调试吧，用 source insight 代替，然后慢慢地，你会发现你对代码的分析能力有一个新的提升。

